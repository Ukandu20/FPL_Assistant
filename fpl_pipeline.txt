FPL Pipeline — End-to-End Manual (Scrape ➜ master_fpl.json)

This is the canonical, idempotent path from raw FPL/API pulls to a consolidated master suitable for modeling. It documents required files, exact commands, outputs, and common failure modes.

0) Quick overview (what runs when)

Data flow

FPL API scrape  ──► data/raw/fpl/<SEASON>/
                     ├─ players_raw.csv, teams.csv, fixtures.csv
                     ├─ players/ (per-player histories)
                     └─ gws/ (per-GW artifacts incl. xP)
        │
        ▼
Season player enrichment (FBref truth)
scripts.fpl_pipeline.pipelines.clean_and_enrich
        │
        ▼
GW stats cleanup + team mapping + player_id match
scripts.fpl_pipeline.clean.gw_stats_cleaner
        │
        ▼
Attach game_id + date_played + time + matches.csv
scripts.fpl_pipeline.clean.assign_game_ids
        │
        ▼
Per-GW price registry
scripts.fpl_pipeline.pipelines.prices_from_merged
        │
        ▼
Consolidate to master_fpl.json
scripts.fpl_pipeline.master.consolidate_master


Seasons are normalized as YYYY-YYYY+1 folders (e.g., 2025-2026), while JSON keys in outputs use short form YYYY-YY (e.g., 2025-26).

1) Prerequisites

Python ≥ 3.10 (3.12 is fine)

Install libs:

pip install pandas numpy unidecode python-dateutil rapidfuzz fuzzywuzzy tqdm


(rapidfuzz is preferred; fuzzywuzzy is an optional fallback for fuzzy name matching.)

Timezone: we use Africa/Lagos when deriving local time from kickoff timestamps.

Registry/config files expected:

data/processed/registry/master_players.json
(FBref source of truth for players; contains career seasons)

data/processed/registry/overrides.json
(manual alias → player_id; suggestions JSONs produced by the pipeline can be pasted here)

data/config/teams.json
(team name/alias → 3-letter code, e.g., "manchester city": "MCI")

data/processed/registry/_id_lookup_teams.json
(3-letter code lowercase → 8-char hex team_id, e.g., "mci": "b11c2f05")

FBref season data expected:

data/processed/fbref/<LEAGUE>/<SEASON_LONG>/player_match/summary.csv
e.g., data/processed/fbref/ENG-Premier League/2025-2026/player_match/summary.csv
Must include: home, away, game_id (plus helpful columns like team_id/opponent_id/is_home).

2) Directory structure (after scrape)
data/
  raw/
    fpl/
      2025-2026/
        players_raw.csv
        teams.csv
        fixtures.csv
        players/
          <id>_<name>_history.csv ...
        gws/
          xP<gw>.csv (optional)
  processed/
    fpl/
      2025-2026/
        season/cleaned_players.csv      (after enrichment)
        gws/merged_gws.csv              (cleaned, then game_id attached)
        matches/matches.csv
        manual_review/...
    fbref/ENG-Premier League/2025-2026/player_match/summary.csv
    registry/
      master_players.json
      overrides.json
      _id_lookup_teams.json
      prices/
        2025-26.json

3) Step-by-step commands

The examples below show PowerShell-friendly calls (your style). Adjust paths if needed.

A) Scrape FPL API (raw)
py -m scripts.fpl_pipeline.scrape.fpl_scraper `
  --season 2025-26 `
  --fresh


What it does:

Normalizes season to 2025-2026

Writes players_raw.csv, teams.csv, fixtures.csv, per-player histories under players/

Builds fixture sidecars:

fixture_metadata.csv, fixture_metadata_resolved.csv

fixture_metadata_per_team.csv, fixture_metadata_per_team_resolved.csv

Optionally creates gws/xP<gw>.csv and gws/merged_gw.csv slices

Gotchas

If fixtures have kickofftime vs kickoff_time, the scraper normalizes.

If teams.csv is missing, the “resolved” variants are skipped.

B) Enrich season players (FBref truth, names = FBref canonical)
py -m scripts.fpl_pipeline.pipelines.clean_and_enrich `
  --raw-root  data/processed/fpl `
  --proc-root data/processed/fpl `
  --fbref-master data/processed/registry/master_players.json `
  --overrides    data/processed/registry/overrides.json `
  --threshold 85 `
  --fail-if-unmatched 10.0 `
  --log-level INFO


Produces per season:

season/cleaned_players.csv enriched with:

player_id, name (FBref canonical), nation, born

team, position, fpl_pos (FBref wins if conflict)

Manual review:

_manual_review/missing_ids_<season>.csv (no player_id match)

_manual_review/missing_season_<season>.csv (player_id matched but FBref has no career entry)

Tip: Paste suggestions from the GW cleaner step (below) into overrides.json to reduce unmatched here as well.

C) Clean per-GW stats, map teams, drop unmatched rows, emit suggestions
py -m scripts.fpl_pipeline.clean.gw_stats_cleaner `
  --raw-root   data/raw/fpl `
  --proc-root  data/processed/fpl `
  --master     data/processed/registry/master_players.json `
  --overrides  data/processed/registry/overrides.json `
  --team-map   data/processed/registry/_id_lookup_teams.json `
  --short-map  data/config/teams.json `
  --on-unmatched drop `
  --log-level INFO --force


Reads raw/fpl/<season>/gws/*.csv, writes cleaned processed/fpl/<season>/gws/*.csv and merged_gws.csv.

Drops rows without player_id (--on-unmatched drop).

Maps:

team_code / opp_code (3-letter)

team_id / opp_id (hex) using lowercased codes in _id_lookup_teams.json

Writes manual review under processed/fpl/<season>/manual_review/:

missing_ids_<season>.json and unmatched_rows_<season>.csv

suggestions_<season>.json (alias → player_id). Paste this into overrides.json and rerun to close gaps.

Important: Your _id_lookup_teams.json uses lowercase codes (e.g., "mci"). The cleaner now lowercases when mapping.

D) Attach game_id, date_played, time, and build matches.csv
py -m scripts.fpl_pipeline.clean.assign_game_ids `
  --proc-root  data/processed/fpl `
  --fbref-root data/processed/fbref `
  --league     "ENG-Premier League" `
  --summary-name summary.csv `
  --tz Africa/Lagos `
  --season 2025-2026 `
  --log-level INFO


Reads FBref summary.csv for the season, builds a per-game table.

Adds to merged_gws.csv:

game_id (tiered joins by date_played/home_id/away_id, then round, with hex ids and short codes fallbacks)

date_played and time:

Uses existing date_played or game_date if present

Else derives from kickoff_time/_formatted/_date → localized to Africa/Lagos

Rewrites each gw*.csv with the same game_id/date_played/time.

Writes matches/matches.csv built from FPL rows (so round is authoritative).

Common cause of misses: team hex IDs absent in FBref summary; code-level fallbacks handle most cases.

E) Build per-GW prices registry
py -m scripts.fpl_pipeline.prices.prices_from_merged `
  --proc-root data/processed/fpl `
  --out-json-dir    data/processed/registry/prices `
  --out-parquet-dir data/processed/registry/prices_parquet `
  --season 2025-2026 `
  --log-level INFO


Detects a price column (price/now_cost/value/cost)

Converts tenths → £ if needed (heuristic), rounds to 1 dp

Selects earliest observation within a GW (handles DGWs)

Outputs:

prices/<season-short>.json → {player_id: { "gw": price } }

prices_parquet/<season>.parquet (or CSV fallback)

F) Consolidate to master_fpl.json
py -m scripts.fpl_pipeline.master.consolidate_master `
  --fbref-master data/processed/registry/master_players.json `
  --proc-root    data/processed/fpl `
  --prices-dir   data/processed/registry/prices `
  --out-json     data/processed/registry/master_fpl.json `
  --league       "ENG-Premier League" `
  --log-level    INFO


Output schema (per player_id):

{
  "first_name": "shkodran",
  "second_name": "mustafi",
  "name": "Shkodran Mustafi",
  "player_id": "ef07a30f",
  "nation": "GER",
  "born": 1992,
  "career": {
    "2019-20": { "team": "ARS", "position": "DEF", "fpl_pos": "DEF", "league": "ENG-Premier League" },
    "2020-21": { "team": "ARS", "position": "DEF", "fpl_pos": "DEF" }
  },
  "prices": {
    "2019-20": { "1": 5.5, "2": 5.4 }
  }
}


Rules:

name = FBref canonical (truth)

position/fpl_pos: FBref season wins; mapped to GKP/DEF/MID/FWD

If FPL shows a season that FBref doesn’t have, that player-season is written to
data/processed/registry/manual_review/missing_career_<season>.csv (not inserted)

4) Validation checklist (quick smoke tests)

After clean_and_enrich:

processed/fpl/<season>/season/cleaned_players.csv has non-null player_id for ≥95% of rows.

After gw_stats_cleaner (--on-unmatched drop):

merged_gws.csv: player_id is non-null; team_code/opp_code populated; team_id/opp_id hex filled.

Suggestions JSON appears under processed/fpl/<season>/manual_review/.

After assign_game_ids:

merged_gws.csv and each gw*.csv contain game_id, date_played, time.

matches/matches.csv exists; round values match FPL rounds.

After prices_from_merged:

prices/<season>.json has { player_id: { gw: price } }.

After consolidate_master:

master_fpl.json loads; sample players show the expected career seasons and prices.

5) Troubleshooting & common pitfalls

Unicode/encoding errors when reading JSONs (Windows cp1252):
All loaders in these scripts attempt multiple encodings. If you add new JSONs, keep them UTF-8.

element_type not numeric: The consolidator accepts 1..4 and strings like DEF/MID/....

Team mappings wrong: _id_lookup_teams.json keys are lowercase codes. The cleaner lowercases, but ensure teams.json (name→code) covers your aliases (e.g., Man Utd, Manchester United FC).

Missing game_id for some rows: Check FBref summary.csv exists for the season; verify home/away codes and hex ids in both sides. The join runs tiers: date+hex, round+hex, date+codes, round+codes.

Suggestions JSON not used: Remember to paste it into overrides.json and rerun clean_and_enrich (and optionally gw_stats_cleaner) for maximal closure.

6) Frequently used variants

Process all seasons (no --season flag):

The cleaners and consolidators will walk all subfolders under the corresponding root.

Force dropping unmatched GW rows (recommended):

--on-unmatched drop in gw_stats_cleaner.

Rebuild season fresh:

Re-run the scraper with --fresh; then re-run downstream steps for that season.

7) “Pushback” — 5 things to decide upfront

Price timing: You’re using earliest-of-GW. Is that aligned to your modeling point (pre-deadline) or do you ever need latest-of-GW for realized analysis?

FPL-only seasons: Today those land in manual_review. Should we record them as career_extra to avoid losing signal while keeping FBref purity?

Name parts casing: first_name/second_name are lowercased for stability. Do you want Title Case for display layers?

League field: We only copy league if present in FBref. For EPL-only projects, should we force "ENG-Premier League" into every season block for consistency?

Hex team ids: You standardize on hex ids (great). Do you want to embed both code and hex in career[season] to avoid joins downstream?

Devil’s advocate: if you later expand to multiple leagues or cups, piggybacking on FBref’s game_id alone might not be globally unique across competitions. Consider scoping game_id by (league, season) in features to prevent accidental cross-competition joins.

8) Minimal “golden run” (copy/paste)

Scrape raw:

py -m scripts.fpl_pipeline.scrape.fpl_scraper --season 2025-26 --fresh


Enrich players (all seasons under processed root):

py -m scripts.fpl_pipeline.pipelines.clean_and_enrich `
  --raw-root  data/processed/fpl `
  --proc-root data/processed/fpl `
  --fbref-master data/processed/registry/master_players.json `
  --overrides    data/processed/registry/overrides.json `
  --threshold 85 --fail-if-unmatched 5.0 --log-level INFO


Clean GW stats (drop unmatched):

py -m scripts.fpl_pipeline.clean.gw_stats_cleaner `
  --raw-root   data/raw/fpl `
  --proc-root  data/processed/fpl `
  --master     data/processed/registry/master_players.json `
  --overrides  data/processed/registry/overrides.json `
  --team-map   data/processed/registry/_id_lookup_teams.json `
  --short-map  data/config/teams.json `
  --on-unmatched drop --log-level INFO --force


Assign game IDs, dates, times:

py -m scripts.fpl_pipeline.clean.assign_game_ids `
  --proc-root  data/processed/fpl `
  --fbref-root data/processed/fbref `
  --league     "ENG-Premier League" `
  --summary-name summary.csv `
  --tz Africa/Lagos `
  --season 2025-2026 `
  --log-level INFO


Build prices:

py -m scripts.fpl_pipeline.prices.prices_from_merged `
  --proc-root data/processed/fpl `
  --out-json-dir    data/processed/registry/prices `
  --out-parquet-dir data/processed/registry/prices_parquet `
  --season 2025-2026 `
  --log-level INFO


Consolidate master:

py -m scripts.fpl_pipeline.master.consolidate_master `
  --fbref-master data/processed/registry/master_players.json `
  --proc-root    data/processed/fpl `
  --prices-dir   data/processed/registry/prices `
  --out-json     data/processed/registry/master_fpl.json `
  --league       "ENG-Premier League" `
  --log-level    INFO